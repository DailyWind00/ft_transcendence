{"ast":null,"code":"export default {\n  name: 'LanguageSelector',\n  data: function data() {\n    return {\n      selectedLanguage: this.$i18n.locale,\n      isOpen: false,\n      flags: {\n        'fr': require('@/assets/fr.png'),\n        'en': require('@/assets/en.png')\n      }\n    };\n  },\n  methods: {\n    toggleDropdown: function toggleDropdown(event) {\n      // Empêche la propagation du clic à l'élément parent\n      event.stopPropagation();\n      this.isOpen = !this.isOpen;\n    },\n    selectLanguage: function selectLanguage(lang) {\n      this.$i18n.locale = lang;\n      this.selectedLanguage = lang;\n      this.isOpen = false; // Ferme le menu après la sélection\n    },\n    handleClickOutside: function handleClickOutside(event) {\n      // Vérifie si le clic a eu lieu en dehors du sélecteur\n      if (this.isOpen && !this.$el.contains(event.target)) {\n        this.isOpen = false;\n      }\n    }\n  },\n  mounted: function mounted() {\n    // Ajoute un écouteur d'événement global pour les clics en dehors\n    document.addEventListener('click', this.handleClickOutside);\n  },\n  beforeDestroy: function beforeDestroy() {\n    // Nettoie l'écouteur d'événement lorsque le composant est détruit\n    document.removeEventListener('click', this.handleClickOutside);\n  }\n};","map":{"version":3,"names":["name","data","selectedLanguage","$i18n","locale","isOpen","flags","require","methods","toggleDropdown","event","stopPropagation","selectLanguage","lang","handleClickOutside","$el","contains","target","mounted","document","addEventListener","beforeDestroy","removeEventListener"],"sources":["src/components/language_selector.vue"],"sourcesContent":["<template>\n\t<div class=\"language-selector-container\" @click=\"handleClickOutside\">\n\t  <div class=\"custom-select\" @click=\"toggleDropdown\">\n\t\t<div class=\"selected-option\">\n\t\t  <img :src=\"flags[selectedLanguage]\" class=\"flag-icon\" alt=\"flag\" />\n\t\t</div>\n\t\t<div v-if=\"isOpen\" class=\"options\">\n\t\t  <div v-for=\"(flag, lang) in flags\" :key=\"lang\" class=\"option\" @click=\"selectLanguage(lang)\">\n\t\t\t<img :src=\"flag\" class=\"flag-icon\" alt=\"flag\" />\n\t\t\t<!-- {{ lang }} -->\n\t\t  </div>\n\t\t</div>\n\t  </div>\n\t</div>\n  </template>\n  \n  <script>\nexport default {\n  name: 'LanguageSelector',\n  data() {\n    return {\n      selectedLanguage: this.$i18n.locale,\n      isOpen: false,\n      flags: {\n        'fr': require('@/assets/fr.png'),\n        'en': require('@/assets/en.png')\n      }\n    };\n  },\n  methods: {\n    toggleDropdown(event) {\n      // Empêche la propagation du clic à l'élément parent\n      event.stopPropagation();\n      this.isOpen = !this.isOpen;\n    },\n    selectLanguage(lang) {\n      this.$i18n.locale = lang;\n      this.selectedLanguage = lang;\n      this.isOpen = false; // Ferme le menu après la sélection\n    },\n    handleClickOutside(event) {\n      // Vérifie si le clic a eu lieu en dehors du sélecteur\n      if (this.isOpen && !this.$el.contains(event.target)) {\n        this.isOpen = false;\n      }\n    }\n  },\n  mounted() {\n    // Ajoute un écouteur d'événement global pour les clics en dehors\n    document.addEventListener('click', this.handleClickOutside);\n  },\n  beforeDestroy() {\n    // Nettoie l'écouteur d'événement lorsque le composant est détruit\n    document.removeEventListener('click', this.handleClickOutside);\n  }\n}\n  </script>\n\n<style src=\"./language_selector.css\" scoped></style>"],"mappings":"AAiBA;EACAA,IAAA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,gBAAA,OAAAC,KAAA,CAAAC,MAAA;MACAC,MAAA;MACAC,KAAA;QACA,MAAAC,OAAA;QACA,MAAAA,OAAA;MACA;IACA;EACA;EACAC,OAAA;IACAC,cAAA,WAAAA,eAAAC,KAAA;MACA;MACAA,KAAA,CAAAC,eAAA;MACA,KAAAN,MAAA,SAAAA,MAAA;IACA;IACAO,cAAA,WAAAA,eAAAC,IAAA;MACA,KAAAV,KAAA,CAAAC,MAAA,GAAAS,IAAA;MACA,KAAAX,gBAAA,GAAAW,IAAA;MACA,KAAAR,MAAA;IACA;IACAS,kBAAA,WAAAA,mBAAAJ,KAAA;MACA;MACA,SAAAL,MAAA,UAAAU,GAAA,CAAAC,QAAA,CAAAN,KAAA,CAAAO,MAAA;QACA,KAAAZ,MAAA;MACA;IACA;EACA;EACAa,OAAA,WAAAA,QAAA;IACA;IACAC,QAAA,CAAAC,gBAAA,eAAAN,kBAAA;EACA;EACAO,aAAA,WAAAA,cAAA;IACA;IACAF,QAAA,CAAAG,mBAAA,eAAAR,kBAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}