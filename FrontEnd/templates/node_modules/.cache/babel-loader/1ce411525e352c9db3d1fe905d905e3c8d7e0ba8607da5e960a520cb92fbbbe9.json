{"ast":null,"code":"var cubeVert = \"\\nvarying vec2\\tvUv;\\nvarying vec4\\tvPosition;\\nvarying vec3\\tvCamPos;\\n\\nuniform float\\ttime;\\n\\nfloat random(vec2 st)\\n{\\n    return fract(sin(dot(st.xy,\\n                         vec2(12.9898,78.233)))\\n                 * 43758.5453123);\\n}\\n\\nfloat\\tnoise(vec2 st)\\n{\\n    vec2\\ti = floor(st);\\n    vec2\\tf = fract(st);\\n\\n    float\\ta = random(i);\\n    float\\tb = random(i + vec2(1.0, 0.0));\\n    float\\tc = random(i + vec2(0.0, 1.0));\\n    float\\td = random(i + vec2(1.0, 1.0));\\n\\n    vec2\\tu = f*f*(3.0-2.0*f);\\n    \\n    return mix(a, b, u.x) +\\n            (c - a)* u.y * (1.0 - u.x) +\\n            (d - b) * u.x * u.y;\\n}\\n\\nvoid\\tmain()\\n{\\n\\tvec4\\tresult = vec4(position, 1.0);\\n\\t\\n\\tvUv = uv;\\n\\tvCamPos = cameraPosition;\\n\\tfor (float i = 1.0f; i > 0.0f; i -= 0.02f)\\n\\t\\tresult.z += noise(result.xy * vec2(sin(i * 0.05))) * uv.y;\\n\\tvPosition = result;\\n\\tgl_Position = projectionMatrix * modelViewMatrix * result;\\n}\";\nexport default cubeVert;","map":{"version":3,"names":["cubeVert"],"sources":["/home/val/42/ft_transcendence/front_end/src/components/ThreeJS/cube-vert.glsl.js"],"sourcesContent":["const cubeVert = `\nvarying vec2\tvUv;\nvarying vec4\tvPosition;\nvarying vec3\tvCamPos;\n\nuniform float\ttime;\n\nfloat random(vec2 st)\n{\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\nfloat\tnoise(vec2 st)\n{\n    vec2\ti = floor(st);\n    vec2\tf = fract(st);\n\n    float\ta = random(i);\n    float\tb = random(i + vec2(1.0, 0.0));\n    float\tc = random(i + vec2(0.0, 1.0));\n    float\td = random(i + vec2(1.0, 1.0));\n\n    vec2\tu = f*f*(3.0-2.0*f);\n    \n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid\tmain()\n{\n\tvec4\tresult = vec4(position, 1.0);\n\t\n\tvUv = uv;\n\tvCamPos = cameraPosition;\n\tfor (float i = 1.0f; i > 0.0f; i -= 0.02f)\n\t\tresult.z += noise(result.xy * vec2(sin(i * 0.05))) * uv.y;\n\tvPosition = result;\n\tgl_Position = projectionMatrix * modelViewMatrix * result;\n}`;\n\nexport default cubeVert;\n"],"mappings":"AAAA,IAAMA,QAAQ,26BAyCZ;AAEF,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}