{"ast":null,"code":"var cubeFrag = \"\\nvarying vec2 vUv;\\n\\nuniform float\\ttime;\\n\\nvec3\\tgetGrid(vec2 uv, float width, vec3 baseColor)\\n{\\n\\tfloat\\tc = max(smoothstep(width, 0.001f, abs(uv.x)), smoothstep(width, 0.001f, abs(uv.y)));\\n\\t\\n\\treturn vec3(c) * baseColor;\\n}\\n\\nvoid\\tmain()\\n{\\n\\tvec3\\tcolor = vec3(0);\\n\\tvec2\\tuv = fract(vUv * 100.0f) - 0.5f;\\n\\n\\tcolor = getGrid(uv, 0.04f, vec3(1.5f, 0.8f, 2.0f));\\n\\tcolor += getGrid(uv, 0.08f, vec3(1.0f, 0.4f, 1.5f));\\n\\n\\tcolor *= vec3(-(abs(vUv.y) - 0.7f)) * 3.0;\\n\\t//color += vec3(-vUv.x) * 0.9;\\n\\tgl_FragColor = vec4(color, 1.0f);\\n}\";\nexport default cubeFrag;","map":{"version":3,"names":["cubeFrag"],"sources":["/home/val/42/ft_transcendence/front_end/src/treeJS/cube-frag.glsl.js"],"sourcesContent":["const cubeFrag = `\nvarying vec2 vUv;\n\nuniform float\ttime;\n\nvec3\tgetGrid(vec2 uv, float width, vec3 baseColor)\n{\n\tfloat\tc = max(smoothstep(width, 0.001f, abs(uv.x)), smoothstep(width, 0.001f, abs(uv.y)));\n\t\n\treturn vec3(c) * baseColor;\n}\n\nvoid\tmain()\n{\n\tvec3\tcolor = vec3(0);\n\tvec2\tuv = fract(vUv * 100.0f) - 0.5f;\n\n\tcolor = getGrid(uv, 0.04f, vec3(1.5f, 0.8f, 2.0f));\n\tcolor += getGrid(uv, 0.08f, vec3(1.0f, 0.4f, 1.5f));\n\n\tcolor *= vec3(-(abs(vUv.y) - 0.7f)) * 3.0;\n\t//color += vec3(-vUv.x) * 0.9;\n\tgl_FragColor = vec4(color, 1.0f);\n}`;\n\nexport default cubeFrag;\n"],"mappings":"AAAA,IAAMA,QAAQ,ijBAuBZ;AAEF,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}