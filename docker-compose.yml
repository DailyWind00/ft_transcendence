services:
  backend:
    container_name: backend
    hostname: backend
    build:
      context: ./BackEnd
    depends_on:
      database:
        condition: service_healthy
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - ft_transcendence
    healthcheck:
      test: ["CMD-SHELL", "curl -k https://localhost:2000/health/ || exit 1"]
      interval: 2s
      timeout: 30s
      retries: 10

  database:
    container_name: database
    hostname: database
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - ft_transcendence
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 2s
      timeout: 30s
      retries: 10

  frontend:
    container_name: frontend
    hostname: frontend
    build:
      context: ./FrontEnd
    depends_on:
      backend:
        condition: service_healthy
      database:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "80:80"
      # - "443:443" # Only for backend
    restart: unless-stopped
    networks:
      - ft_transcendence
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost/health/ || exit 1"]
      interval: 2s
      timeout: 30s
      retries: 10

  vault:
    image: vault:1.12.7
    container_name: vault
    user: root
    restart: on-failure:10
    ports:
      - "8201:8201"
    environment:
      VAULT_ADDR: 'http://0.0.0.0:8201'
      VAULT_LOCAL_CONFIG: |
        {
          "listener": [{
            "tcp": {
              "address": "0.0.0.0:8201",
              "tls_disable": "1"
            }
          }],
          "default_lease_ttl": "168h",
          "max_lease_ttl": "720h",
          "storage": {
            "file": {
              "path": "/data/vault-data"
            }
          },
          "ui": true
        }
    cap_add:
      - IPC_LOCK
    volumes:
      - vault-volume:/data
    healthcheck:
      retries: 5
    networks:
      - ft_transcendence

volumes:
  postgres_data:
    driver: local
  vault-volume:
    driver: local

networks:
  ft_transcendence:
    name: ft_transcendence
    driver: bridge
