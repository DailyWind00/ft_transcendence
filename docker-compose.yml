services:
  backend:
    container_name: backend
    hostname: backend
    build:
      context: ./BackEnd
    depends_on:
      database:
        condition: service_healthy
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - ft_transcendence
    ports:
      - "2000:2000"
      - "2000:2000"
      - "2500:2500" # Websocket access
    healthcheck:
      test: ["CMD-SHELL", "curl -k https://localhost:2000/health/ || exit 1"]
      interval: 2s
      timeout: 30s
      retries: 10

  database:
    container_name: database
    hostname: database
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - ft_transcendence
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 2s
      timeout: 30s
      retries: 10

  frontend:
    container_name: frontend
    hostname: frontend
    build:
      context: ./FrontEnd
    depends_on:
      backend:
        condition: service_healthy
      database:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "443:443"
      - "2000:2000" # Backend access, to remove
    restart: unless-stopped
    networks:
      - ft_transcendence
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://backend:2000/health/ || exit 1"]
      interval: 2s
      timeout: 30s
      retries: 10

  redis:
    container_name: redis
    hostname: redis
    image: redis
    restart: unless-stopped
    networks:
      - ft_transcendence
  
volumes:
  postgres_data:
    driver: local

networks:
  ft_transcendence:
    name: ft_transcendence
    driver: bridge
