services:
  backend:
    container_name: backend
    hostname: backend
    build:
      context: ./BackEnd
    depends_on:
      vault:
        condition: service_healthy
      database:
        condition: service_healthy
    environment:
      - VAULT_ADDR=${VAULT_INIT_ADDR}
    restart: unless-stopped
    volumes:
      - ./volume/vault-data:/vault/file/
      - ./ssl/private:/etc/ssl/private
    networks:
      - ft_transcendence
    healthcheck:
      test: ["CMD-SHELL", "curl -k https://localhost:2000/health/ || exit 1"]
      interval: 2s
      timeout: 30s
      retries: 10

  database:
    container_name: database
    hostname: database
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - ft_transcendence
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 2s
      timeout: 30s
      retries: 10

  frontend:
    container_name: frontend
    hostname: frontend
    build:
      context: ./FrontEnd
    depends_on:
      backend:
        condition: service_healthy
      database:
        condition: service_healthy
      vault:
        condition: service_healthy
    environment:
      - VAULT_ADDR=${VAULT_INIT_ADDR}
    ports:
      - "80:80"
      # - "8000:8000" // for testing
    restart: unless-stopped
    networks:
      - ft_transcendence
    volumes:
      - /var/www/html
      - ./volume/vault-data:/vault/file/
      - ./ssl/certs:/etc/ssl/certs
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost/health/ || exit 1"]
      interval: 2s
      timeout: 30s
      retries: 10

  vault:
    #image: hashicorp/vault:1.13.3
    container_name: vault
    build: 
      context: ./Vault
    environment:
      - VAULT_ADDR=${VAULT_ADDR}
      - VAULT_CACERT=${VAULT_CACERT}
    ports:
      - 8200:8200
    restart: always
    networks:
      - ft_transcendence
    volumes:
      - ./Vault/config.hcl:/vault/config/config.hcl
      - ./volume/vault-data:/vault/file/
      - ./Vault/start-vault.sh:/./start-vault.sh
      - ./ssl/certs:/etc/vault/certs
      - ./ssl/private:/etc/vault/private
      - ./ssl:/ssl
    cap_add:
      - IPC_LOCK
    #entrypoint: ["/bin/sh", "-c", "/start-vault.sh"]
    healthcheck:
      test: ["CMD", "vault status"]
      interval: 2s
      timeout: 10s
      retries: 3

  vault-init:
    #image: hashicorp/vault:1.13.3
    container_name: vault-init
    build: 
      context: ./vault-init
    restart: on-failure
    networks:
      - ft_transcendence
    env_file: .env
    environment:
      - VAULT_ADDR=${VAULT_INIT_ADDR}
      #- MY_VAULT_TOKEN=${MY_VAULT_TOKEN}
      - VAULT_CACERT=${VAULT_CACERT}
    volumes:
      - ./vault/vault-init.sh:/usr/local/bin/vault-init.sh
      - ./volume/vault-data:/vault/file/
      - ./ssl/certs:/etc/vault/certs
      - ./ssl/private:/etc/vault/private
      - ./ssl:/ssl
    #command: /Vault/vault-init.sh
    depends_on:
      - vault


volumes:
  postgres_data:
    driver: local
  vault-data:
    driver: local

networks:
  ft_transcendence:
    name: ft_transcendence
    driver: bridge

