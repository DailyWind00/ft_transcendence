services:
  backend:
    container_name: backend
    hostname: backend
    build:
      context: ./BackEnd
    depends_on:
      database:
        condition: service_healthy
      vault:
        condition: service_healthy
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - ft_transcendence
    healthcheck:
      test: ["CMD-SHELL", "curl -k https://localhost:2000/health/ || exit 1"]
      interval: 2s
      timeout: 30s
      retries: 10

  database:
    container_name: database
    hostname: database
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    depends_on:
      vault:
        condition: service_healthy
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - ft_transcendence
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 2s
      timeout: 30s
      retries: 10

  frontend:
    container_name: frontend
    hostname: frontend
    build:
      context: ./FrontEnd
    # volumes:
    #   - ./FrontEnd/tools/nginx.conf:/etc/nginx/nginx.conf
    #   - ./FrontEnd/tools/ssl:/etc/nginx/ssl
    depends_on:
      backend:
        condition: service_healthy
      database:
        condition: service_healthy
      vault:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "443:443"
      - "2000:2000" # Backend access
    restart: unless-stopped
    networks:
      - ft_transcendence
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://backend:2000/health/ || exit 1"]
      interval: 2s
      timeout: 30s
      retries: 10

  vault:
    container_name: vault
    hostname: vault
    image: vault:latest
    # volumes:
    #   - ./Vault/config/vault.hcl:/vault/config/vault.hcl
    #   - ./Vault/data:/vault/data
    build:
      context: ./Vault
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - ft_transcendence
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD-SHELL", "curl -k https://localhost:8200/v1/sys/health || exit 1"]
      interval: 2s
      timeout: 30s
      retries: 10

volumes:
  postgres_data:
    driver: local

networks:
  ft_transcendence:
    name: ft_transcendence
    driver: bridge
